////  MNBaseSequence.h//  NotationTest////  Created by Michael Norris on Sat Jun 14 2003.//  Copyright (c) 2003 __MyCompanyName__. All rights reserved.//#import <Foundation/Foundation.h>@class	MNMusicSequence;//@class 	MNScoreView;@class	MNSequenceBar;@class 	MNTimeSignature;@class  MNKeySignature;@class	MNSequenceNote;//@class 	MNSystem;// MIDI velocity increments for soft and loud dynamic profile calculation#define kPInc (kQuietVel-kLoudVel-10)#define kFInc 0// ** TRIAD TYPES ** //enum {    kDiatonicTriad	= 1,    kMajorTriad,    kMinorTriad,    kAugmentedTriad,    kDiminishedTriad};// ** INTERVALS ** //enum {    kUnisonInterval	= 0,    kMinorSecondInterval,    kMajorSecondInterval,    kMinorThirdInterval,    kMajorThirdInterval,    kPerfectFourthInterval,    kTritoneInterval,    kPerfectFifthInterval,    kMinorSixthInterval,    kMajorSixthInterval,    kMinorSeventhInterval,    kMajorSeventhInterval};// ** DYNAMIC PROFILES ** //enum {    kNoDynamics = 0,    kFthenP,    kPthenF,    kPtoF,    kFtoP,    kFthenPtoF,    kFtoPthenF,    kPthenFtoP,    kPtoFthenP};static NSString *dynamicProfileStrArray[] = {@"No dynamics",@"F, then P", @"P, then F", @"P cresc to F", @"F dim to P", @"F, then P cresc to F", @"F dim to P, then F", @"P, then F dim to P", @"P cresc to F, then P"};// ** CLEFS ** //enum {    kTrebleClef	= 0,    kAltoClef,    kTenorClef,    kBassClef,	kTenor8Clef,    kRhythmClef,    kEndOfClefs};// ** IF THIS CLEF IS SHOWN, HOW MANY STEPS/LINES ARE PITCHES RAISED? //enum {    kTrebleClefOffset = 0,    kAltoClefOffset = 6,    kTenorClefOffset = 8,	kTenor8ClefOffset = 7,    kBassClefOffset = 12,    kRhythmClefOffset = 0};// ** CHROMATIC ALTERATIONS ** //enum {    kRaised = 1,    kLowered = -1,    kDoubleRaised = 2,    kDoubleLowered = -2,    kTripleRaised = 3,    kTripleLowered = -3};// ** CHORD INVERSIONS ** //enum {    kRootPosition = 0,    kFirstInversion,    kSecondInversion};@interface MNBaseSequence : NSObject {    int			MIDIChannel;    NSMutableArray	*bars;    NSMutableArray	*timeSignatures;    MNKeySignature	*keySignature;    int			clef;    float		tempo;}- (id)initWithTimeSigEnum:(int)e             timeSigDenom:(int)d               keySigCode:(int)s                     mode:(int)m                     clef:(int)c;- (id)initWithTimeSigEnum:(int)e             timeSigDenom:(int)d                basePitch:(int)s                     mode:(int)m                     clef:(int)c;/*- (id)initWithTimeStampedMIDI:(NSMutableArray*)myPerformanceArray                  timeSigEnum:(int)e                 timeSigDenom:(int)d                   keySigCode:(int)s                         mode:(int)m                         clef:(int)c;*/- (id)initWithTimeSignature:(MNTimeSignature *)timeSig               keySignature:(MNKeySignature *)keySig                       clef:(int)c;- (void)setKeySignatureFromSigCode:(int)sigCode;- (MNKeySignature *)keySignature;- (MNTimeSignature *)timeSignature;- (MNSequenceNote *)addRestWithDuration:(float)dur;- (MNSequenceNote *)addNoteWithPitch:(int)pitch                 chromaticAlteration:(int)acc                            duration:(float)dur;- (MNSequenceNote *)addTriadOnDegree:(int)degree                           triadType:(int)m                           inversion:(int)inversion                             seventh:(BOOL)seventh                            duration:(float)dur;/*    // scoreView conversions- (void)mergeWithScoreView:(MNScoreView*)s;- (void)mergeWithScoreView:(MNScoreView*)s partNumber:(int)p;- (void)mergeWithScoreView:(MNScoreView*)s fromBarNumber:(int)b partNumber:(int)p;- (void)attachToScoreView:(MNScoreView*)s;- (void)attachToScoreView:(MNScoreView*)s partNumber:(int)p;- (void)attachToScoreView:(MNScoreView*)s fromBarNumber:(int)b partNumber:(int)p;- (void)attachRhythmsToScoreView:(MNScoreView*)scoreView;- (MNSystem *)attachToScoreView:(MNScoreView*)s                      barNumber:(int)i                         system:(MNSystem*)system;- (MNSystem *)attachToScoreView:(MNScoreView*)scoreView                      barNumber:(int)i                         system:(MNSystem *)system                    rhythmsOnly:(BOOL)rhythmsOnly;- (void)attachToScoreViewWithoutStems:(MNScoreView*)scoreView;*/    // ** MNMusicSequence conversions- (void)convertToMusicSequence:(MNMusicSequence*)inSequence;- (void)convertToMusicSequence:(MNMusicSequence *)inSequence               dynamicProfile:(int)dynamicProfile;- (void)convertToMusicSequence:(MNMusicSequence*)inSequence               stressDownbeats:(BOOL)downs;- (void)convertToMusicSequence:(MNMusicSequence*)inSequence               stressDownbeats:(BOOL)downs                     unpitched:(BOOL)unpitched;- (void)convertToMusicSequence:(MNMusicSequence*)inSequence                     unpitched:(BOOL)unpitched;- (void)convertToMusicSequence:(MNMusicSequence*)inSequence                barsForNothing:(int)b               stressDownbeats:(BOOL)downs                     unpitched:(BOOL)unpitched;- (void)mergeWithMusicSequence:(MNMusicSequence *)inSequence                barsForNothing:(int)bfn;- (void)mergeWithMusicSequence:(MNMusicSequence*)inSequence;- (void)mergeWithMusicSequence:(MNMusicSequence *)inSequence               stressDownbeats:(BOOL)downs;- (void)mergeWithMusicSequence:(MNMusicSequence *)inSequence                barsForNothing:(int)bfn                     unpitched:(BOOL)unpitched;- (void)mergeWithMusicSequence:(MNMusicSequence *)inSequence                barsForNothing:(int)bfn               stressDownbeats:(BOOL)downs;- (void)mergeWithMusicSequence:(MNMusicSequence *)inSequence                barsForNothing:(int)bfn               stressDownbeats:(BOOL)downs                     unpitched:(BOOL)unpitched;- (void)mergeWithMusicSequence:(MNMusicSequence *)inSequence                barsForNothing:(int)bfn               stressDownbeats:(BOOL)downs                       channel:(int)chan;- (void)mergeWithMusicSequence:(MNMusicSequence *)inSequence                barsForNothing:(int)bfn               stressDownbeats:(BOOL)downs                     unpitched:(BOOL)unpitched                       channel:(int)chan;- (void)mergeWithMusicSequence:(MNMusicSequence *)inSequence                barsForNothing:(int)bfn               stressDownbeats:(BOOL)downs                     unpitched:(BOOL)unpitched                       channel:(int)chan                dynamicProfile:(int)dynamicProfile;    // utility methods- (MNSequenceBar*)newBar;- (MNSequenceBar*)newBarWithTimeSignatureEnum:(int)e                                        denom:(int)d;- (MNSequenceNote *)setNote:(int)index                    toPitch:(int)pitch        chromaticAlteration:(int)alt;- (void)transposeDiatonic:(int)offset;- (MNSequenceNote *)setLastNoteToPitch:(int)pitch                   chromaticAlteration:(int)alt;- (MNBaseSequence*)copyWithZone:(NSZone *)zone;- (MNBaseSequence*)copy;- (MNBaseSequence*)copyWithRange:(NSRange)range;- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(id __unsafe_unretained *)stackbuf count:(NSUInteger)len;- (int)countBars;- (int)countNotes;- (int)countNotesIgnoringTies;- (int)countNotesIgnoringTiesAndRests;- (MNSequenceNote*)getFirstNote;- (MNMusicSequence*)generateClickTrack;- (MNMusicSequence*)generateCountInBars:(int)b;    // BASE SEQUENCE COMPARISON ROUTINES/*- (int)markBaseSequenceForAccuracy:(MNBaseSequence *)sequence                    incorrectArray:(NSMutableArray **)incArray                         scoreView:(MNScoreView*)scoreView                        rhythmOnly:(BOOL)rhythmOnly                         pitchOnly:(BOOL)pitchOnly;- (int)markScoreViewForPitchOnly:(MNScoreView*)scoreView                  incorrectArray:(NSMutableArray **)incArray;- (int)markTimeStampedMIDIForAccuracy:(NSMutableArray *)timeStampedMIDI                       incorrectArray:(NSMutableArray **)incArray                            scoreView:(MNScoreView*)scoreView;- (int)markTimeStampedMIDIForRhythms:(NSMutableArray *)timeStampedMIDI                      incorrectArray:(NSMutableArray **)incArray						   scoreView:(MNScoreView*)scoreView; */+ (void)convertMIDIPitchArrayToSequences:(NSMutableArray*)answerPitches                                 sigCode:(int)sigCode                                    mode:(int)mode                                duration:(float)dur                              RHSequence:(MNBaseSequence**)RHSequence                              LHSequence:(MNBaseSequence**)LHSequence;//- (void)addModulation;- (void)addLeadingNoteAlterations;- (void)emphasiseFinal:(int)prob;- (void)setPitchesTo:(int)p;    // *** ACCESSORS *** //- (void)setMIDIChannel:(int)m;- (int)MIDIChannel;- (void)setBars:(NSMutableArray *)b;- (NSMutableArray *)bars;- (MNSequenceBar *)barAtIndex:(int)i;- (MNSequenceBar *)lastBar;- (MNSequenceNote *)noteAtIndex:(int)i;- (MNSequenceNote *)firstNote;- (MNSequenceNote *)lastNote;- (void)setTimeSignatures:(NSMutableArray *)t;- (void)setTimeSigEnum:(int)e					   timeSigDenom:(int)d;- (void)setKeySignature:(MNKeySignature *)k;- (void)setClef:(int)clef;- (int)clef;- (float)tempo;- (float)duration;- (void)setTempo:(float)f;- (void)removeBars:(NSRange)range;- (float)firstBarDurationInSeconds;- (int)getDegree:(int)i;- (int)getOctave:(int)i;@end